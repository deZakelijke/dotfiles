" Autoamtically reload vimrc when it's saved
augroup ReloadVimrc
    au!
    au BufWritePost .vimrc so ~/.vimrc
    au BufWritePost ~/repos/dotfilese/vimrc so ~/.vimrc
augroup end

" Line numbers and tabs
set relativenumber
set number
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set smarttab
set autoindent
set smartindent
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set scrolloff=8
set nohlsearch
set hidden
set nowrap
set colorcolumn=88
set signcolumn=yes
syntax on

" Folding
set foldmethod=indent
set nofoldenable
set foldnestmax=10
set foldlevel=1

" Split window opening
set splitbelow
set splitright

" Random remaps
nnoremap <space> i<space><right><esc>
nmap <CR> o<Esc>k
inoremap jj <Esc>


let mapleader="."

" Move singe line  or multiple lines up or down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Move cursor to middle of screen when moving through search results and
" jumping
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Easier window navigation
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l

" Autocompletion
set wildmenu
set wildmode=list:longest,full

" Replace preview
if has("nvim")
    set inccommand=nosplit
endif


" Plug plugin manager
" https://github.com/junegunn/vim-plug
" For NeoVim run:
" sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
"
" After installation run :PlugInstall

call plug#begin('~/.vim/plugged')

" Colour schemes
Plug 'sjl/badwolf'
" Plug 'nightsense/carbonized'
Plug 'morhetz/gruvbox'
Plug 'mhartington/oceanic-next'

" Cassandra CQL syntax highlighting
Plug 'elubow/cql-vim'

" tcomment_vim line commenter
Plug 'tomtom/tcomment_vim'

" Pydocstring
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install', 'for': 'python' }

" ALE(Asynchronous Lint Engine)
Plug 'dense-analysis/ale'

" Poet-v python env integration
Plug 'petobens/poet-v'

" Rust Vim syntax highlighting and file detection
Plug 'rust-lang/rust.vim'

" Vim Toml syntax highlighting
Plug 'cespare/vim-toml'

" UndoTree
Plug 'mbbill/undotree'

" NERDTree file browser
Plug 'preservim/nerdtree'

" Easymotion (not really using this)
Plug 'easymotion/vim-easymotion'

" Airline git branch indicator
Plug 'vim-airline/vim-airline'

" Vim fugitive git merge tool
Plug 'tpope/vim-fugitive'

" Lightline status bar colouring
Plug 'itchyny/lightline.vim'

if has("nvim")
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'

    " Telescope
    Plug 'nvim-telescope/telescope.nvim'

    " Harpoon file marker
    Plug 'ThePrimeagen/harpoon'

    " Debugger
    Plug 'mfussenegger/nvim-dap'
    Plug 'mfussenegger/nvim-dap-python'

    " Treesitter
    Plug 'nvim-treesitter/nvim-treesitter'
    Plug 'nvim-treesitter/nvim-treesitter-context'
endif

call plug#end()

" Colourscheme settings
syntax enable
filetype plugin indent on
if has("termguicolors")
    set termguicolors
endif
silent! colorscheme OceanicNext

" Python docstring style
let g:pydocstring_formatter = 'google'
let g:pydocstring_doq_path ='~/.local/bin/doq'
" command Docs Pydocstring

" Poet-v settings
let g:poetv_auto_activate = 1
let g:poetv_executables = ['poetry']
let g:poetv_set_environment = 1


" Toggle undoTree
nnoremap <F5> :UndotreeToggle<CR>

" ALE Fixers and Linters
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'html': ['prettier'],
\   'javascript': ['prettier', 'eslint'],
\   'json': ['prettier'],
\   'python': ['black', 'isort'],
\   'rust': ['rustfmt'],
\   'typescript': ['prettier', 'eslint'],
\}
let g:ale_linters = {
\   'bash': ['shellcheck'],
\   'html': ['prettier'],
\   'javascript': ['prettier', 'eslint'],
\   'python': ['pylint', 'mypy'],
\   'rust': ['analyzer'],
\   'sh': ['shellcheck'],
\}
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 50
let g:ale_linters_explicit = 1
let g:ale_python_auto_poetry = 1
let g:ale_python_pylint_auto_poetry = 1
let g:ale_python_pylint_options = "--generate-members"
let g:ale_python_bandit_auto_poetry = 1
let g:ale_python_black_auto_poetry = 1
let g:ale_python_isort_auto_poetry = 1
let g:ale_python_mypy_auto_poetry = 1
let g:ale_rust_rls_executable = 'rust-analyzer'
" ALE Movement keys
nmap <silent> <F6> <Plug>(ale_previous_wrap)
nmap <silent> <F7> <Plug>(ale_next_wrap)
let g:python3_host_prog = "/usr/bin/python3"




" NerdTree maps
nnoremap <F8> :NERDTreeToggle<CR>
" Close NERDTree if it is the last window
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Lightline color settings
let g:lightline = {
\   'colorscheme': 'wombat',
\}

if has("nvim")
    " Telescope maps and settings
    nnoremap <leader>ff <cmd>Telescope find_files<cr>
    nnoremap <leader>fg <cmd>Telescope live_grep<cr>
    nnoremap <leader>fb <cmd>Telescope buffers<cr>

    " Harpoon maps and settings
    lua require("telescope").load_extension('harpoon')
    nnoremap <leader>fm <cmd>Telescope harpoon marks<CR>
    nnoremap <silent> <leader>a <Cmd>lua require'harpoon.mark'.add_file()<CR>
    nnoremap <silent> <C-e> <Cmd>lua require'harpoon.ui'.toggle_quick_menu()<CR>
    nnoremap <silent> <F1> <Cmd>lua require'harpoon.ui'.nav_file(1)<CR>
    nnoremap <silent> <F2> <Cmd>lua require'harpoon.ui'.nav_file(2)<CR>
    nnoremap <silent> <F3> <Cmd>lua require'harpoon.ui'.nav_file(3)<CR>
    nnoremap <silent> <F4> <Cmd>lua require'harpoon.ui'.nav_file(4)<CR>

    " DAP maps and settings
    lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
    nnoremap <silent> <F9> <Cmd>lua require'dap'.continue()<CR>
endif
